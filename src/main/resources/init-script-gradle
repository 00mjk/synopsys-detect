import java.nio.charset.StandardCharsets

import org.gradle.api.Task
import org.gradle.api.execution.TaskExecutionListener
import org.gradle.api.tasks.TaskState

import com.blackducksoftware.integration.gradle.DependencyGatherer

initscript {
    def airgapDirectory = new File('AIRGAP_LIBS_DIRECTORY_PATH')
    boolean runAirgap = RUN_AIRGAP
    if (runAirgap && !airgapDirectory.exists()) {
        runAirgap = false
        println "Could not run air gapped because libs were not in expected directory: ${airgapDirectory.getCanonicalPath()}"
    } else if (runAirgap) {
        println "Running air gapped. Using jars in ${airgapDirectory.getCanonicalPath()}"
    }
    repositories {
        if (runAirgap) {
            flatDir {
                dirs airgapDirectory.getCanonicalPath()
            }
        } else {
            mavenLocal()
            mavenCentral()
        }
    }

    dependencies {
        if (runAirgap) {
            airgapDirectory.eachFile {
                String fileName = it.name.find('.*\\.jar')?.replace('.jar', '')
                if (fileName) {
                    classpath name: fileName
                }
            }
        } else {
            classpath 'com.blackducksoftware.integration:integration-gradle-inspector:GRADLE_INSPECTOR_VERSION'
        }
    }
}

addListener(
        new TaskExecutionListener() {
            boolean executed = false;

            void beforeExecute(Task task) { }
            void afterExecute(Task task, TaskState state) {
                if (executed) {
                    return
                } else {
                    executed = true
                }

                File outputDirectory = new File(task.project.buildDir, 'blackduck')
                outputDirectory.mkdirs()
               
                def dependencyGatherer = new DependencyGatherer()
                def rootProject = task.project
                dependencyGatherer.createAllCodeLocationFiles(rootProject, 'EXCLUDED_PROJECT_NAMES', 'INCLUDED_PROJECT_NAMES', 'EXCLUDED_CONFIGURATION_NAMES', 'INCLUDED_CONFIGURATION_NAMES', outputDirectory)
           }
       })